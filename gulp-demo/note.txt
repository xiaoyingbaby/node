gulp与webpack

要使用gulp和webpack--->安装这两个包----->npm安装----->node.js自带的
所以：安装node.js--->npm->安装gulp和webpack包

1，去node.js官网下载对应操作系统的版本
https://nodejs.org/dist/v6.11.5/node-v6.11.5-x64.msi
2，一路next安装软件
3，判断node.js是否安装成功
    打开( win + R )输入cmd ---> cmd命令行工具
    node -v: 查看node版本号
    npm -v: 查看npm版本号
    node --help: 查看node的帮助
    npm --help: 查看npm的帮助

    dos命令:
        cls:清除当前屏幕的内容
        cd: 切换路径
        dir: 查看当前目录的文件和目录信息



node.js发布之后，自带npm包管理工具
npm包管理器:
包( 软件 )
利用命令行的方式去一个网站( https://www.npmjs.com/ )下载软件

linux yum包管理器
yum install xxx

gulp是什么？

gulp 是基于 node 实现 Web 前端自动化开发的工具，利用它能够极大的提高开发效率。
在 Web 前端开发工作中有很多“重复工作”，比如压缩CSS/JS文件。而这些工作都是有规律的。
找到这些规律，并编写 gulp 配置代码,让 gulp 自动执行这些“重复工作”

一、安装gulp与压缩js文件

命令:

 npm install gulp -g

 npm install gulp --save-dev

初始化项目package.json的配置：npm init --yes

创建项目的目录结构
demo2
-----dist
-----src
        -css
        -img
        -js
-----gulpfile.js
-----package.json

在js目录下新建文件( lib.js )
var Oper = {
    add : function( n1, n2 ){
        return n1 + n2;
    },
    sbb : function( n1, n2 ){
        return n1 - n2;
    }
}

安装压缩js的插件: npm install gulp-uglify --save-dev,

然后在gulpfile.js中，输入任务处理代码

var gulp = require( 'gulp' );
var uglify = require( 'gulp-uglify' );

gulp.task('min-js', function() {
    gulp.src('src/js/*.js')
        .pipe( uglify() )
        .pipe( gulp.dest('dist/js') );
});

gulp.task(name, fn) - 定义任务，第一个参数是任务名，第二个参数是任务内容。
gulp.src(path) - 选择文件，传入参数是文件路径。
gulp.dest(path) - 输出文件
gulp.pipe() - 管道，你可以暂时将 pipe 理解为将操作加入执行队列


在命令行执行任务: gulp min-js

就会在 dist/js/lib.js 生成压缩文件

在demo2目录下创建index.html，输入以下测试代码

<script src="./dist/js/lib.js"></script>
<script>
   alert( Oper.add( 100, 200 ) );
</script>

------------------------------------------------------------------------------
二、压缩css文件

安装插件： npm install gulp-clean-css --save-dev
在css目录创建一个css文件

在gulp中添加压缩css的任务
var gulp = require( 'gulp' );
var uglify = require( 'gulp-uglify' );
var cleanCSS = require( 'gulp-clean-css' );

gulp.task('min-js', function() {
    gulp.src('src/js/*.js')
        .pipe( uglify() )
        .pipe( gulp.dest('dist/js') );
});

gulp.task('min-css', function() {
    gulp.src('src/css/*.css')
        .pipe( cleanCSS() )
        .pipe( gulp.dest('dist/css') );
});


三、编译less
安装插件：npm install gulp-less --save-dev
在css目录新建less文件

var gulp = require( 'gulp' );
var uglify = require( 'gulp-uglify' );
var cleanCSS = require( 'gulp-clean-css' );
var less = require('gulp-less');

gulp.task('min-js', function() {
    gulp.src('src/js/*.js')
        .pipe( uglify() )
        .pipe( gulp.dest('dist/js') );
});

gulp.task('min-css', function() {
    gulp.src('src/css/*.css')
        .pipe( cleanCSS() )
        .pipe( gulp.dest('dist/css') );
});

gulp.task( 'compile-less', function(){
    gulp.src( 'src/css/*.less' )
        .pipe( less() )
        .pipe( gulp.dest( 'dist/less' ) );
} );

四、合并js文件

安装插件：npm install gulp-concat --save-dev
gulp-demo/src/js新建lib2.js文件

var concat = require('gulp-concat');
gulp.task( 'concat-file', function(){
gulp.src( 'src/js/*.js' )
    .pipe( concat('all.min.js') )
    .pipe( uglify() )
    .pipe( gulp.dest( 'dist/js' ) );
} );


五、自动监测文件变化，执行任务
gulp.task( 'auto', function(){
     gulp.watch( 'src/js/*.js', ['min-js'] );
     gulp.watch( 'src/css/*.css', ['min-css'] );
} );
gulp.task( 'default', ['auto'] );

这里添加了一个默认任务default: 执行auto任务，auto里面自动监测压缩js和压缩css任务
在命令行直接执行gulp.

gulp使用总结：
1，安装相应的插件
2，添加相应的任务
3，执行任务
